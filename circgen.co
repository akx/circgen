canvas = null
ctx = null
options = {}
contInterval = null

El = (tag, args) ->
	el = document.createElement tag
	_.each args, (value, key) -> el[key] = value if value !== null
	el
	
controls = {}

_Cbase = (id, label, inp) ->
	lbl = El \label,
		"for": id
		innerHTML: "#{label} <span id=\"va_#{id}\">#{getElValue inp}</span>"
		id: "lb_#{id}"
	inp.addEventListener \change, onChange, false
	br = El \br
	targetEl = document.getElementById \controls
	targetEl.appendChild el for el of [lbl, inp, br]
	controls[id] = inp
	
Cnum = (id, label, min = 0, max = 100, value = null, step = 1) ->
	_Cbase id, label, El \input,
		id: id
		type: \range
		min: min
		max: max
		step: step
		value: value || min
		
Crange = (id, label, min = 0, max = 100, valueMin = null, valueMax = null, step = 1) ->
	Cnum "#{id}Min", "#{label} Min", min, max, valueMin, step
	Cnum "#{id}Max", "#{label} Max", min, max, valueMax, step
	
Cbool = (id, label, value) ->
	_Cbase id, label, El \input,
		id: id
		type: \checkbox
		checked: if !!value then "checked" else null
	
getElValue = (el) ->
	if el.type == "checkbox" then
		!!el.checked
	else
		0 | el.value

gatherOptions = ->
	opts = {}
	_.map controls, (el, key) ->
		opts[key] = getElValue el
	opts

regen = ->
	
	options := gatherOptions()
	if options.canvasSize
		canvas.width = canvas.height = options.canvasSize
	
	initGen()
	next()
	
next = ->
	setTimeout (-> continueGen(); next(); ), 150

regenDebounced = _.debounce regen, 50

onChange = (event) ->
	document.getElementById("va_#{event.target.id}").innerHTML = getElValue event.target
	options := gatherOptions()
	#regenDebounced()

################################################################################
	
genCoord = (x, y) -> y * options.gridSize + x
isCoord = (x, y) -> (y >= 0 && y < options.gridSize && x >= 0 && x < options.gridSize)
isFree = (x, y) -> isCoord(x, y) and !(+grid[genCoord(x, y)])

rnd = (min, max) -> 0 | (min + Math.random() * (max - min))

grid = null
wires = null
currentWire = null

initGen = ->
	grid := {}
	wires := []
	currentWire := null

getFreeCoord = ->
	tries = 0
	while tries < 10
		tries ++
		startX = rnd 0, options.gridSize
		startY = rnd 0, options.gridSize
		if isFree startX, startY
			#console.log "OK, got #{startX} #{startY}"
			return
				x: startX
				y: startY
	return null



getNewDelta = (wire) ->
	lastPoint = wire.points[wire.points.length - 1]
	tries = 0
	while tries < 20
		tries ++
		if options.useOldRouting
			dx = rnd -1, 2
			dy = rnd -1, 2
		else
			dx = rnd(0, 1000)%3 - 1
			dy = rnd(0, 1000)%3 - 1
		#console.log "try #{tries} at #{lastPoint.x},#{lastPoint.y} <-> #{dx},#{dy}"
			
			
		if (dx == 0 && dy == 0)
			continue

		if !(wire.dx == 0 and wire.dy == 0) and not options.allowAnyTurn
			xC = Math.abs(wire.dx - dx)
			yC = Math.abs(wire.dy - dy)
			if not (wire.dx == dx ^ wire.dy == dy) or xC > 1 or yC > 1 then
				continue
			
		if options.dontAllowStraight and dx == wire.dx and dy == wire.dy
			continue

		
		if isFree(lastPoint.x + dx, lastPoint.y + dy)
			return
				dx: dx
				dy: dy

getNewDs = (wire) ->
	rnd options.wireDsMin, options.wireDsMax

startNewWire = ->
	startXY = getFreeCoord()
	if startXY
		newWire =
			points: [startXY]
			dx: 0
			dy: 0
			ds: 0
			len: rnd options.wireLenMin, options.wireLenMax
		
		newDelta = getNewDelta newWire
		newWire.ds = getNewDs currentWire
		if not newDelta
			return false
		{newWire.dx, newWire.dy} = newDelta 
		wires.push newWire
		return newWire
	false

transPt = (point) ->
	w = options.gridSpacing
	x: (1 + point.x) * w
	y: (1 + point.y) * w

redraw = ->
	canvas.width = canvas.height = options.canvasSize
	ctx.clearRect 0, 0, canvas.width, canvas.height
	
	

	
	ctx.strokeStyle = "black"
	ctx.fillStyle = "white"
	
	if options.removeShortThreshold > 0
		oldN = wires.length
		wires := _.filter wires, (wire) -> wire == currentWire || wire.points.length > options.removeShortThreshold
		if wires.length != oldN
			grid := {}
	
	# Wire pass
	_.each wires, (wire, wIndex) ->
		ctx.lineWidth = options.wireThickness
		ctx.lineCap = ['butt','round','square'][options.wireCaps]
		ctx.lineJoin = ['round','bevel','miter'][options.wireJoins]
		ctx.beginPath()
		
		_.each wire.points, (point, index) ->
			grid[genCoord(point.x, point.y)] = true # Mark here. It's safe since redraw() is done before iteration
			curr = transPt point
			if index == 0
				ctx.moveTo curr.x, curr.y
			else
				ctx.lineTo curr.x, curr.y
		ctx.stroke()
		ctx.closePath()

	# Hole pass
	if options.circleRadius > 0
		ctx.lineWidth = options.circleThickness
		_.each wires, (wire, wIndex) ->
			_.each [wire.points[0], wire.points[wire.points.length - 1]], (point) ->
				curr = transPt point
				ctx.beginPath()
				ctx.arc curr.x, curr.y, options.circleRadius, 0, Math.PI * 2, true
				ctx.fill()
				ctx.stroke()
				ctx.closePath()

	if options.debug >= 1
		ctx.lineWidth = 1
		for y from 0 til options.gridSize
			for x from 0 til options.gridSize
				pt = transPt {x: x, y: y}
				if pt.x > canvas.width
					break
				ctx.strokeStyle = if isFree(x, y) then "green" else "red"
				ctx.strokeRect pt.x - 5, pt.y - 5, 10, 10
			if pt.y > canvas.height
				break

canTraverse = (fromPt, toPt) ->
	if options.allowCrossing
		return isCoord toPt.x, toPt.y
	return false if not isFree toPt.x, toPt.y
	dx = toPt.x - fromPt.x
	dy = toPt.y - fromPt.y
	if Math.abs(dx) + Math.abs(dy) == 2 then # is diagonal, so check the neighbors too
		return false if not (isFree fromPt.x + dx, fromPt.y and isFree fromPt.x, fromPt.y + dy)
	return true

continueGen = ->
	redraw()
	
	if options.stop
		return true
	
	if not currentWire
		console.log "No current wire, trying to start new."
		currentWire := startNewWire()
		if not currentWire
			console.log "Could not start new line"
			return false
		return true
	
	if currentWire
		lastPoint = currentWire.points[currentWire.points.length - 1]
		newPoint =
			x: lastPoint.x + currentWire.dx
			y: lastPoint.y + currentWire.dy
			
		if not canTraverse lastPoint, newPoint # terminate current wire if it'd go off-limits
			currentWire := null
			return true
			
		if currentWire.len <= 0 # terminate current wire if it's due to do that
			currentWire := null
			return true
		
		
		currentWire.points.push newPoint
		
		currentWire.ds --
		currentWire.len --
		
		if currentWire.ds <= 0
			console.log "Generating new delta"
			currentWire.ds = getNewDs currentWire
			newDelta = getNewDelta currentWire
			if not newDelta
				console.log "Unable to find valid delta, killing wire"
				currentWire := null
				return true
			{currentWire.dx, currentWire.dy} = newDelta
	return true

init = ->
	Cbool \stop, "Stop"
	Cnum \canvasSize, "Size", 100, 2048, 800, 16
	Cnum \gridSize, "Grid Size", 3, 400, 30
	Cnum \gridSpacing, "Grid Spacing", 1, 50, 20
	Cnum \wireThickness, "Wire Thickness", 1, 50, 3
	Cnum \circleRadius, "Circle Radius", 0, 50, 6
	Cnum \circleThickness, "Circle Thickness", 1, 50, 3
	Cnum \wireCaps, "Wire Caps", 0, 2, 0
	Cnum \wireJoins, "Wire Joins", 0, 2, 0
	Crange \wireLen, "Wire Length", 1, 100, 10, 30
	Crange \wireDs, "Wire Turn I'val", 1, 100, 2, 7
	Cnum \removeShortThreshold, "Short Wire Del Thresh", 0, 150, 0
	
	Cbool \allowCrossing, "Allow Crossing"
	Cbool \allowAnyTurn, "Allow Any Turn"
	Cbool \dontAllowStraight, "Don't allow cont. at turn"
	Cbool \useOldRouting, "Use old routing"
	Cnum \debug, "Debug", 0, 5, 1
	
	canvas := document.getElementById \c
	ctx := canvas.getContext \2d
	regen()